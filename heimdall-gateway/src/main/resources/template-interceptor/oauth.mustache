import java.util.*;
import com.netflix.zuul.ZuulFilter;
import com.google.common.collect.Sets;
import com.netflix.zuul.context.RequestContext;
import static br.com.conductor.heimdall.core.util.Constants.INTERRUPT;
import br.com.conductor.heimdall.core.enums.InterceptorLifeCycle;
import br.com.conductor.heimdall.core.enums.TypeOAuth;
import br.com.conductor.heimdall.core.exception.HeimdallException;
import br.com.conductor.heimdall.gateway.service.LifeCycleService;
import br.com.conductor.heimdall.core.util.BeanManager;
import br.com.conductor.heimdall.gateway.filter.helper.*;
import br.com.conductor.heimdall.gateway.filter.HeimdallFilter;
import br.com.conductor.heimdall.gateway.filter.helper.HelperImpl;
import br.com.conductor.heimdall.gateway.trace.TraceContextHolder;
import br.com.conductor.heimdall.gateway.service.OAuthInterceptorService;
import br.com.conductor.heimdall.middleware.spec.*;
import br.com.conductor.heimdall.middleware.spec.Helper;
import br.com.conductor.heimdall.middleware.spec.Http;


public class OAuthInterceptor extends HeimdallFilter {

     private static Set<String> pathsAllowed;

     private static Set<String> pathsNotAllowed;

     private static String inboundURL;

     private static String method;

     private static Long referenceId;

     private Helper helper;

     private Long providerId = {{providerId}};

     private int timeAccessToken = {{timeAccessToken}};

     private int timeRefreshToken = {{timeRefreshToken}};

     private String privateKey = "{{privateKey}}";

     private OAuthInterceptorService oAuthInterceptorService;

     public OAuthInterceptor() {

          pathsAllowed = Sets.newHashSet();
     {{#pathsAllowed}}
          pathsAllowed.add("{{.}}");
     {{/pathsAllowed}}

          pathsNotAllowed = Sets.newHashSet();
     {{#pathsNotAllowed}}
          pathsNotAllowed.add("{{.}}");
     {{/pathsNotAllowed}}

          inboundURL = "{{inboundURL}}";
          method = "{{method}}";

          this.helper = new HelperImpl();

          referenceId = {{referenceId}};

     }

     @Override
     public int filterOrder() {

          return {{order}};
     }

     @Override
     public String filterType() {

          return "{{executionPoint}}";
     }

     @Override
     public boolean should() {

        LifeCycleService lifeCycleService = (LifeCycleService) BeanManager.getBean(LifeCycleService.class);
        return lifeCycleService.should(InterceptorLifeCycle.{{lifeCycle}}, pathsAllowed, pathsNotAllowed, inboundURL, method, RequestContext.getCurrentContext().getRequest(), referenceId);
     }

     @Override
     public String getName() {
     	return "{{name}}"
     }

     @Override
     public void execute() throws Throwable {

        oAuthInterceptorService = (OAuthInterceptorService) BeanManager.getBean(OAuthInterceptorService.class);

        try {
            oAuthInterceptorService.executeInterceptor(TypeOAuth.{{typeOAuth}}, privateKey, timeAccessToken, timeRefreshToken, providerId, helper);
        } catch( HeimdallException ex ){
            generateResponse( ex.getMsgEnum().getMessage(), ex.getMsgEnum().getHttpCode());
        }
        return null;
     }

     /**
     * Method that sends a Response
     *
     * @param message    Response message
     * @param httpStatus {@link HttpStatus} of the response
     */
     private void generateResponse(String message, int httpStatus) {
         message = "{ \"error\" : \"" + message + "\" }";
         TraceContextHolder.getInstance().getActualTrace().trace(message);
         this.helper.call().response().setStatus(httpStatus);
         this.helper.call().response().header().add("Content-Type", "application/json");
         this.helper.call().response().setBody(message);
     }
}