import br.com.conductor.heimdall.gateway.service.CORSInterceptorService;
import br.com.conductor.heimdall.core.enums.InterceptorLifeCycle;
import br.com.conductor.heimdall.core.util.BeanManager;
import br.com.conductor.heimdall.gateway.service.LifeCycleService;
import com.netflix.zuul.ZuulFilter;
import com.netflix.zuul.context.RequestContext;

import javax.servlet.http.HttpServletRequest;
import java.util.*;

import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.PRE_TYPE;

public class CorsPreInterceptor extends ZuulFilter {

    private static Set<String> pathsAllowed;
    private static Set<String> pathsNotAllowed;
    private static String inboundURL = {{inboundURL}};
    private static Long referenceId = {{referenceId}};
    private HttpServletRequest request;

    private static Map<String, String> cors;

    public CorsFilterPre() {
        request = RequestContext.getCurrentContext().getRequest();
        cors = new HashMap<>();
        pathsAllowed = new HashSet<>();
        pathsNotAllowed = new HashSet<>();
        
        {{#pathsAllowed}}
            pathsAllowed.add({{.}})
        {{/pathsAllowed}}
        
        {{#pathsNotAllowed}}
            pathsNotAllowed.add({{.}})
        {{/pathsNotAllowed}}

        {{#cors}}
            cors.put({{key}}, {{value}})
        {{/cors}}
    }

    @Override
    public boolean shouldFilter() {
        LifeCycleService lifeCycleService = (LifeCycleService) BeanManager.getBean(LifeCycleService.class);
        return lifeCycleService.should(InterceptorLifeCycle.API, pathsAllowed, pathsNotAllowed, inboundURL, request.getMethod(), request, referenceId);
    }

    @Override
    public Object run() {
        
        CORSInterceptorService corsService = (CORSInterceptorService) BeanManager.getBean(CORSInterceptorService.class)
        corsService.executeCorsPreFilter(request, cors);

        return null;
    }

    @Override
    public int filterOrder() {
        return {{order}};
    }

    @Override
    public String filterType() {
        return PRE_TYPE;
    }

}
