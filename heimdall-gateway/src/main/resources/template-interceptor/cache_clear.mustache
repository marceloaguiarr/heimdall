import java.util.*;

import br.com.conductor.heimdall.core.enums.InterceptorLifeCycle;
import br.com.conductor.heimdall.core.util.BeanManager;
import br.com.conductor.heimdall.gateway.filter.HeimdallFilter;
import br.com.conductor.heimdall.gateway.service.CacheInterceptorService;

import com.google.common.collect.Sets;
import com.netflix.zuul.context.RequestContext;

import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.POST_TYPE;


public class CacheClearInterceptor extends HeimdallFilter {

    private static Set<String> pathsAllowed;

    private static Set<String> pathsNotAllowed;

    private static String inboundURL;

    private static String method;

    private static String cacheName;

    private CacheInterceptorService cacheInterceptorService;

    public CacheClearInterceptor() {

        cacheName = "{{cache}}";

        method = "{{method}}";

        pathsAllowed = Sets.newHashSet();
        {{#pathsAllowed}}
        pathsAllowed.add("{{.}}");
        {{/pathsAllowed}}

        pathsNotAllowed = Sets.newHashSet();
        {{#pathsNotAllowed}}
        pathsNotAllowed.add("{{.}}");
        {{/pathsNotAllowed}}

        inboundURL = "{{inboundURL}}";

    }

    @Override
    public boolean should() {
        return InterceptorLifeCycle.{{lifeCycle}}.filter(pathsAllowed, pathsNotAllowed, inboundURL, method, RequestContext.getCurrentContext().getRequest());
    }

    @Override
    public void execute() throws Throwable {

        cacheInterceptorService = (CacheInterceptorService) BeanManager.getBean(CacheInterceptorService.class);

        cacheInterceptorService.cacheClearInterceptor(cacheName);
    }

    @Override
    public String getName() {
        return "{{name}}";
    }

    @Override
    public String filterType() {
        return POST_TYPE;
    }

    @Override
    public int filterOrder() {
        return {{order}};
    }
}
